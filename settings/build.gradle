apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'maven-publish'


android {
    namespace 'org.futo.circles.settings'
    compileSdk rootProject.ext.sdk_version

    defaultConfig {
        minSdk rootProject.ext.min_sdk_version
        targetSdk rootProject.ext.sdk_version

        missingDimensionStrategy "store", "gplay", "fdroid"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
        freeCompilerArgs += [
                "-opt-in=kotlinx.coroutines.FlowPreview",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
        ]
    }
}

dependencies {
    implementation project(path: ':core')
    implementation project(':auth')

    //Hilt
    implementation "com.google.dagger:hilt-android:$rootProject.ext.hilt_version"
    kapt "com.google.dagger:hilt-compiler:$rootProject.ext.hilt_version"
    implementation 'androidx.hilt:hilt-work:1.2.0'

    //QR
    implementation 'com.github.yuriy-budiyev:code-scanner:2.3.2'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

kapt {
    correctErrorTypes = true
}


afterEvaluate {
    publishing.publications.create("release", MavenPublication) {
        groupId rootProject.ext.modules_groupId
        artifactId "settings"
        version rootProject.ext.modules_version

        pom.withXml {
            def dependenciesNode = asNode().appendNode('dependencies')
            ext.addDependency = { Dependency dep, String scope ->
                if (dep.group == null || dep.name == null || dep.name == "unspecified" || dep.version == "unspecified") return
                final dependencyNode = dependenciesNode.appendNode('dependency')
                dependencyNode.appendNode('groupId', dep.group)
                dependencyNode.appendNode('artifactId', dep.name)
                dependencyNode.appendNode('version', dep.version)
                dependencyNode.appendNode('scope', scope)
            }
            configurations.api.getDependencies().each { dep -> addDependency(dep, "compile") }
            configurations.implementation.getDependencies().each { dep -> addDependency(dep, "runtime") }
        }
    }
}