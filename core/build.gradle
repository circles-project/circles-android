apply plugin: 'com.android.library'
apply plugin: 'org.jetbrains.kotlin.android'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'maven-publish'


android {
    namespace 'org.futo.circles.core'
    compileSdk rootProject.ext.sdk_version

    defaultConfig {
        minSdk rootProject.ext.min_sdk_version
        targetSdk rootProject.ext.sdk_version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17.toString()
        freeCompilerArgs += [
                "-opt-in=kotlinx.coroutines.FlowPreview",
                "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi",
        ]
    }
}

dependencies {
    api 'androidx.appcompat:appcompat:1.6.1'
    api 'com.google.android.material:material:1.10.0'
    api 'androidx.recyclerview:recyclerview:1.3.2'
    api "androidx.autofill:autofill:1.1.0"

    //Kotlin
    api "androidx.core:core-ktx:1.12.0"

    //androidx lifecycle
    def lifecycle_version = "2.6.2"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    api "androidx.lifecycle:lifecycle-process:$lifecycle_version"

    //androidx navigation
    api "androidx.navigation:navigation-fragment-ktx:$rootProject.ext.androidx_nav_version"
    api "androidx.navigation:navigation-ui-ktx:$rootProject.ext.androidx_nav_version"

    //ViewBinding
    api 'com.github.kirich1409:viewbindingpropertydelegate-noreflection:1.5.9'

    //Hilt
    implementation "com.google.dagger:hilt-android:$rootProject.ext.hilt_version"
    kapt "com.google.dagger:hilt-compiler:$rootProject.ext.hilt_version"

    //Matrix
    api 'org.matrix.android:matrix-sdk-android:1.5.30.16'

    //Retrofit2
    def retrofit_version = '2.9.0'
    api "com.squareup.retrofit2:retrofit:$retrofit_version"
    api "com.squareup.retrofit2:converter-gson:$retrofit_version"

    //Gson
    api 'com.google.code.gson:gson:2.10.1'

    //Worker
    def work_version = "2.8.1"
    api "androidx.work:work-runtime-ktx:$work_version"

    //Glide
    def glide_version = '4.16.0'
    api "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    //Webp animations
    api 'com.github.penfeizhou.android.animation:glide-plugin:2.26.0'

    //QR
    api 'com.google.zxing:core:3.5.2'

    //Shake detection
    implementation 'com.squareup:seismic:1.0.3'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
}

kapt {
    correctErrorTypes = true
}


def groupIdString = "org.futo.circles"
def artifactIdString = "core"

afterEvaluate {
    Properties properties = new Properties()
    if (rootProject.file("local.properties").exists()) {
        properties.load(rootProject.file("local.properties").newDataInputStream())
    }
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                groupId groupIdString
                artifactId artifactIdString
                version rootProject.ext.modules_version
            }
        }
        repositories {
            maven {
                url "https://gitlab.futo.org/api/v4/projects/$rootProject.ext.modules_gitlab_projectId/packages/maven"
                name "GitLab"
                credentials(HttpHeaderCredentials) {
                    name = "Private-Token"
                    value = properties.getProperty("PUBLISH_TOKEN")
                }
                authentication {
                    header(HttpHeaderAuthentication)
                }
            }
        }
    }
}